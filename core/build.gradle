plugins {
	id 'java'
	id 'org.flywaydb.flyway' version '7.15.0'
	id 'com.avast.gradle.docker-compose' version '0.16.12'
}

group = 'com.newyorktaxi'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

flyway {
	url = 'jdbc:postgresql://localhost:5555/service'
	user = 'service'
	password = 'service'
	baselineOnMigrate = true
	baselineVersion = '1.0' // Specify the version to use for baseline
}

compileJava {
	options.compilerArgs += [
			'-Amapstruct.suppressGeneratorTimestamp=true',
			'-Amapstruct.suppressGeneratorVersionInfoComment=true',
			'-Amapstruct.defaultComponentModel=spring',
			'-Amapstruct.defaultInjectionStrategy=constructor'
	]
}

dependencies {
	implementation project(':avro')

	implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.8'
	implementation group: 'org.hibernate.validator', name:'hibernate-validator', version:'8.0.0.Final'

	implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springBootVersion
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion

	implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.19.1'

	// shedlock for distributed lock management
	implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-spring', version: '5.4.0'
	implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-provider-jdbc-template', version: '5.4.0'

	compileOnly group: 'org.mapstruct', name: 'mapstruct', version: mapStructVersion
	testCompileOnly group: 'org.mapstruct', name: 'mapstruct', version: mapStructVersion
	annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapStructVersion
	testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapStructVersion

	implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.0.2'
	implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '3.0.8'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
	implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '7.3.1'
	implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.15.2'

	testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'
	testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.0.3'

	annotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'
	compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
	testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.1.0'
	testImplementation group: 'org.springframework.kafka', name: 'spring-kafka-test', version: '3.0.8'
}

sourceSets{
	test {
		java.srcDirs = ['src/test/java/unit', 'src/test/java/intg']
	}
}

dockerCompose {
	useComposeFiles = ['../docker/dockerPostgres.yml', '../docker/dockerKafka.yml']
	startedServices = ['postgres', 'kafka1', 'kafka2', 'kafka3', 'kafka-schema-registry']
}

test {
	dependsOn composeUp
	finalizedBy composeDown
}

tasks.named('test') {
	useJUnitPlatform()
}
